#![allow(
  non_snake_case,
  clippy::redundant_field_names,
  clippy::new_without_default,
  clippy::too_many_arguments
)]

use serde::{
  de::{DeserializeOwned, Deserializer},
  Deserialize, Serialize
};
use serde_with::{NoneAsEmptyString, serde_as};
use serde_json::Value;

use std::collections::HashMap;

use chrono::DateTime;
use chrono::Utc;

fn deserialize_nonoptional_vec<'de, D: Deserializer<'de>, T: DeserializeOwned>(
    d: D,
) -> Result<Vec<T>, D::Error> {
    Deserialize::deserialize(d).map(|x: Option<_>| x.unwrap_or_default())
}

fn deserialize_nonoptional_map<'de, D: Deserializer<'de>, T: DeserializeOwned>(
    d: D,
) -> Result<HashMap<String, T>, D::Error> {
    Deserialize::deserialize(d).map(|x: Option<_>| x.unwrap_or_default())
}

{{#models~}}
    {{#model~}}
        {{#isEnum~}}
#[derive(Debug, Serialize, Deserialize, Copy, Clone, PartialEq, Eq, Hash)]
        {{#description~}}
    /// {{{description}}}
        {{/description~}}
pub enum {{name}} {
{{#allowableValues~}}
  {{#enumVars~}}
  #[serde(rename = "{{{value}}}")]
  {{#description~}}
  /// {{{description}}}
  {{/description~}}
  {{name}},
  {{/enumVars~}}
{{/allowableValues~}}
}
impl ToString for {{name}} {
  fn to_string(&self) -> String {
      serde_json::to_value(self).unwrap().as_str().unwrap().to_string()
  }
}
        {{/isEnum~}}
        {{^isEnum~}}
            {{#description~}}
/// {{{description}}}
            {{/description~}}
            {{#emptyVars~}}
pub type {{classname}} = {{dataType}};
            {{/emptyVars~}}
            {{^emptyVars~}}
                {{#isContainer~}}
pub type {{classname}} = {{#isArrayModel}}Vec{{{parent}}}{{/isArrayModel}}{{^isArrayModel}}{{#isListContainer}}Vec<{{#items}}{{{datatype}}}{{/items}}>{{/isListContainer}}{{#isMapContainer}}HashMap<String, {{#items}}{{{datatype}}}{{/items}}{{^items}}String{{/items}}>{{/isMapContainer}}{{/isArrayModel}};
{{!}}
                {{/isContainer~}}
                {{^isContainer~}}
#[serde_as]
#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct {{classname}} {
{{#vars~}}
    {{#description~}}
    /// {{{description}}}
    {{/description~}}
    #[serde(rename = "{{{baseName}}}")]
    {{#required~}}
        {{#isContainer~}}
            {{^isListContainer~}}
    #[serde(deserialize_with = "deserialize_nonoptional_map")]
            {{/isListContainer~}}
            {{#isListContainer~}}
    #[serde(deserialize_with = "deserialize_nonoptional_vec")]
            {{/isListContainer~}}
        {{/isContainer~}}
        {{#isEnum~}}
    #[serde(skip_serializing_if="Option::is_none")]
    #[serde_as(as = "NoneAsEmptyString")]{{/isEnum}}
    pub {{name}}:
            {{#isEnum~}}
        Option<{{classname}}{{enumName}}>
            {{/isEnum~}}
            {{^isEnum~}}
                {{#isListContainer~}}
        Vec<{{#items}}{{{datatype}}}{{/items}}>
                {{/isListContainer~}}
                {{^isListContainer~}}
                    {{#isContainer~}}
        HashMap<String, {{#items}}{{{datatype}}}{{/items}}>
                    {{/isContainer~}}
                    {{^isContainer~}}
        {{{datatype}}}
                    {{/isContainer~}}
                {{/isListContainer~}}
            {{/isEnum~}},
        {{/required~}}
        {{^required~}}
    #[serde(skip_serializing_if="Option::is_none")]
    pub {{name}}: Option<
            {{#isEnum~}}
        {{classname}}{{enumName}}
            {{/isEnum~}}
            {{^isEnum~}}
                {{#isListContainer~}}
        Vec<{{#items}}{{{datatype}}}{{/items}}>
                {{/isListContainer~}}
                {{^isListContainer~}}
                    {{#isContainer~}}
        HashMap<String, {{#items}}{{{datatype}}}{{/items}}>
                    {{/isContainer~}}
                    {{^isContainer~}}
        {{{datatype}}}
                    {{/isContainer~}}
                {{/isListContainer~}}
            {{/isEnum~}}
        >,
    {{/required~}}
{{/vars~}}
}
{{#vars}}{{#isEnum}}
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, PartialOrd, Serialize, Deserialize, Eq, Ord, Hash)]{{#xmlName}}
#[serde(rename = "{{xmlName}}")]{{/xmlName}}
pub enum {{classname}}{{enumName}} {
    {{#allowableValues~}}
        {{#enumVars~}}
        #[serde(rename = "{{{value}}}")]
        {{name}},
        {{/enumVars~}}
    {{/allowableValues~}}
    {{#vendorExtensions~}}
        {{#x-rustgen-additional-enum-values}}
        #[serde(rename = "{{{value}}}")]
        {{name}},
        {{/x-rustgen-additional-enum-values~}}
    {{/vendorExtensions~}}
}

impl ::std::fmt::Display for {{classname}}{{enumName}} {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
    match *self {
    {{#vendorExtensions~}}
        {{#x-rustgen-additional-enum-values~}}
            {{classname}}{{enumName}}::{{name}} => write!(f, "{{{value}}}"),
        {{/x-rustgen-additional-enum-values~}}
    {{/vendorExtensions~}}
    {{#allowableValues~}}
        {{#enumVars~}}
            {{classname}}{{enumName}}::{{name}} => write!(f, "{{{value}}}"),
        {{/enumVars~}}
    {{/allowableValues~}}
        }
    }
}

impl ::std::str::FromStr for {{classname}}{{enumName}} {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
        {{#allowableValues~}}
            {{#enumVars~}}
                "{{{value}}}" => Ok({{classname}}{{enumName}}::{{name}}),
            {{/enumVars~}}
        {{/allowableValues~}}
        {{#vendorExtensions~}}
            {{#x-rustgen-additional-enum-values~}}
                {{{value}}} => Ok({{classname}}{{enumName}}::{{name}}),
            {{/x-rustgen-additional-enum-values~}}
        {{/vendorExtensions~}}
                x => Err(format!("Invalid enum type: {}", x)),
        }
    }
}

impl ::std::convert::AsRef<str> for {{classname}}{{enumName}} {
    fn as_ref(&self) -> &str {
        match self {
    {{#allowableValues~}}
        {{#enumVars~}}
            {{classname}}{{enumName}}::{{name}} => "{{{value}}}",
        {{/enumVars~}}
    {{/allowableValues~}}
    {{#vendorExtensions~}}
        {{#x-rustgen-additional-enum-values~}}
            {{classname}}{{enumName}}::{{name}} => "{{{value}}}",
        {{/x-rustgen-additional-enum-values~}}
    {{/vendorExtensions~}}
        }
    }
}
{{/isEnum}}{{/vars}}
                {{/isContainer~}}
            {{/emptyVars~}}
        {{/isEnum~}}
    {{/model~}}
{{/models~}}
